// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$double-right-arr-name: 'double-right-arr';
$double-right-arr-x: 143px;
$double-right-arr-y: 52px;
$double-right-arr-offset-x: -143px;
$double-right-arr-offset-y: -52px;
$double-right-arr-width: 7px;
$double-right-arr-height: 7px;
$double-right-arr-total-width: 151px;
$double-right-arr-total-height: 104px;
$double-right-arr-image: '../img/png_sprite/sprite.png';
$double-right-arr: (143px, 52px, -143px, -52px, 7px, 7px, 151px, 104px, '../img/png_sprite/sprite.png', 'double-right-arr', );
$q-left-name: 'qLeft';
$q-left-x: 121px;
$q-left-y: 52px;
$q-left-offset-x: -121px;
$q-left-offset-y: -52px;
$q-left-width: 22px;
$q-left-height: 16px;
$q-left-total-width: 151px;
$q-left-total-height: 104px;
$q-left-image: '../img/png_sprite/sprite.png';
$q-left: (121px, 52px, -121px, -52px, 22px, 16px, 151px, 104px, '../img/png_sprite/sprite.png', 'qLeft', );
$q-right-name: 'qRight';
$q-right-x: 121px;
$q-right-y: 68px;
$q-right-offset-x: -121px;
$q-right-offset-y: -68px;
$q-right-width: 22px;
$q-right-height: 16px;
$q-right-total-width: 151px;
$q-right-total-height: 104px;
$q-right-image: '../img/png_sprite/sprite.png';
$q-right: (121px, 68px, -121px, -68px, 22px, 16px, 151px, 104px, '../img/png_sprite/sprite.png', 'qRight', );
$st-new-name: 'st-new';
$st-new-x: 0px;
$st-new-y: 52px;
$st-new-offset-x: 0px;
$st-new-offset-y: -52px;
$st-new-width: 121px;
$st-new-height: 52px;
$st-new-total-width: 151px;
$st-new-total-height: 104px;
$st-new-image: '../img/png_sprite/sprite.png';
$st-new: (0px, 52px, 0px, -52px, 121px, 52px, 151px, 104px, '../img/png_sprite/sprite.png', 'st-new', );
$st-top-name: 'st-top';
$st-top-x: 0px;
$st-top-y: 0px;
$st-top-offset-x: 0px;
$st-top-offset-y: 0px;
$st-top-width: 151px;
$st-top-height: 52px;
$st-top-total-width: 151px;
$st-top-total-height: 104px;
$st-top-image: '../img/png_sprite/sprite.png';
$st-top: (0px, 0px, 0px, 0px, 151px, 52px, 151px, 104px, '../img/png_sprite/sprite.png', 'st-top', );
$spritesheet-width: 151px;
$spritesheet-height: 104px;
$spritesheet-image: '../img/png_sprite/sprite.png';
$spritesheet-sprites: ($double-right-arr, $q-left, $q-right, $st-new, $st-top, );
$spritesheet: (151px, 104px, '../img/png_sprite/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
